package emailservice

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/thanksduck/emailService/lib"
)

func (s *EmailService) handleSendEmail(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	query := r.URL.Query()
	to := query.Get("to")
	if to == "" {
		http.Error(w, "Missing 'to' parameter", http.StatusBadRequest)
		return
	}

	slug := query.Get("slug")
	if slug == "" {
		http.Error(w, "Missing 'slug' parameter", http.StatusBadRequest)
		return
	}

	tmpl, ok := s.templates[slug]
	if !ok {
		http.Error(w, "Template not found", http.StatusNotFound)
		return
	}

	// Get subject from query params or use default
	subject := query.Get("subject")
	if subject == "" {
		subject = fmt.Sprintf("Email for %s", slug)
	}

	// Initialize template data
	data := map[string]interface{}{}

	// Parse the data JSON if provided
	dataJSON := query.Get("data")
	if dataJSON != "" {
		var jsonData map[string]interface{}
		if err := json.Unmarshal([]byte(dataJSON), &jsonData); err != nil {
			http.Error(w, "Invalid JSON in data parameter", http.StatusBadRequest)
			return
		}

		// Add all fields from JSON to the template data
		for key, value := range jsonData {
			data[key] = value
		}
	}

	// Check for individual parameters and add them if not already in data
	// This is for backward compatibility with your existing code
	if userId := query.Get("userId"); userId != "" && data["userId"] == nil {
		data["UserId"] = userId
	}

	if name := query.Get("name"); name != "" && data["name"] == nil {
		data["Name"] = name
	}

	if otp := query.Get("otp"); otp != "" && data["otp"] == nil {
		data["OTP"] = otp
	} else if query.Get("generateOTP") == "true" && data["otp"] == nil {
		data["OTP"] = lib.GenerateOTP()
	}

	// Build metadata from any other query parameters
	metadata := make(map[string]string)
	for key, values := range query {
		if key != "to" && key != "slug" && key != "subject" && key != "data" && key != "userId" && key != "name" && key != "otp" && key != "generateOTP" {
			metadata[key] = values[0]
		}
	}

	if len(metadata) > 0 {
		data["Metadata"] = metadata
	}

	// Execute template to get the email body
	var bodyBuf bytes.Buffer
	if err := tmpl.Execute(&bodyBuf, data); err != nil {
		http.Error(w, "Failed to render template", http.StatusInternalServerError)
		return
	}

	// Queue the email for sending
	emailData := EmailData{
		To:       to,
		Subject:  subject,
		Body:     bodyBuf.String(),
		UserId:   fmt.Sprint(data["UserId"]),
		Name:     fmt.Sprint(data["Name"]),
		OTP:      fmt.Sprint(data["OTP"]),
		Metadata: metadata,
	}

	if err := s.QueueEmail(emailData); err != nil {
		http.Error(w, "Failed to queue email", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusAccepted)
	fmt.Fprintf(w, `{"status":"success","message":"Email queued for delivery"}`)
}
